MSBuild
=======

.. index:: ! MSBuild, ! automated build tool

By now, you may have noticed a ``.csproj`` file in your C# project folders. Perhaps not surprisingly, 
this is a *C# Project* file type. It contains instructions on how to build the project. When we write
code in Visual Studio, another Microsoft program called **MSBuild** is doing some heavy lifting in the 
background to build the application so that your code can be run. An **automated build tool**, such as 
MSBuild, is responsible for tasks like:

- Compiling the source code
- Managing dependencies
- Testing protocol
- Packaging the executable program for deployment

Because we're writing our projects in the Visual Studio IDE, MSBuild has so far done most of its work 
under the radar. Just like the unit testing tools we covered earlier, MSBuild is included intrinsically 
inside of the IDE. There are other other build tools available to use in C# projects, but we'll stick 
to the one that is provided to us out of the box. 

.. index:: ! XML , ! Extensible Markup Language, ! MSBuild tasks, ! MSBuild targets, ! MSBuild properties, ! MSBuild items 

The Project File
----------------

The ``.csproj`` file is dynamically generated by MSBuild when the application is built. It is actually
written in **XML (Extensible Markup Language)**. Like HTML, XML is a markup language --- and you'll see 
it looks quite similar. It is most often used in data transferring - think HTTP requests, similar to how 
JSON is used. An MSBuild project file uses XML elements to convey information about how the build is meant to take 
place in different environments.

The four principal elements of a project file are:

#. **Tasks**: Units of executable code. Any build action that needs to take place will be done via tasks. 
   The other elements pass information into tasks.
#. **Targets**: Group and order related tasks for execution.
#. **Properties**: Key/value pairs used for build configuration information.
#. **Items**: Used to input resources, such as files, into the build system. 

So far, in our simple projects, there is not much complexity in what MSBuild and the ``.csproj`` file need to do. For the most 
part, we are just writing C# code that is designed to be tested and executed within the IDE with few dependencies. When you are 
working as a C# developer on the job, things will start to get more complicated. For example, you will likely need at least three 
target environments for your application --- debugging in the IDE, a development server for testing your deployed program before it is released to the user, and the final production environment.
In addition to that, you will probably have a number of dependencies - some of which will have different responsibilities in those
different environments. So this is all to say, we won't need to do much with the project file yet, but the elements summarized 
above provide the details needed to manage larger projects.

To view and edit a project file yourself, in Visual Studio, right click on the project's name and from the dropdown menu, 
select *Edit Project File*.

.. figure:: figures/edit-project-file.png
   :scale: 50%
   :alt: User selecting "Edit Project File" from project action dropdown menu

   User selecting "Edit Project File".

.. TODO: Check windows for ^^

Most of our project files from this class will look like this:

.. sourcecode:: XML

   <Project Sdk="Microsoft.NET.Sdk">
      <PropertyGroup>
         <OutputType>Exe</OutputType>
         <TargetFramework>netcoreapp3.1</TargetFramework>
      </PropertyGroup>
   </Project>

.. admonition:: Note

   It is possible that a more recent version of .NET Core may become available before this text. Barring any major changes to the 
   framework, the explanation below will still apply.


This project contains two property elements: ``OutputType`` and ``TargetFramework``. ``<OutputType>`` specifies the format of 
the build's output. ``OutputType`` is the key, and ``Exe`` is the value. This build outputs an ``.exe`` file. ``<TargetFramework>``
provides the version of .NET Core that the program uses. Both of these properties are wrapped in a ``<PropertyGroup>`` element. In 
fact, all property elements must be nested within a ``<PropertyGroup>`` tag. Finally, ``<Project>`` is a special element that 
forms the base of all project files. 


Check Your Understanding
------------------------

.. admonition:: Question

   What is the language of the C# project file?

   a. MSBuild

   b. C#

   c. csproj

   d. XML

.. ans: d, xml

.. admonition:: Question

   What is the element type used for the individual units of the build process?

   a. item

   b. task

   c. property

   d. target

.. ans: b, task




